version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - broker-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    networks:
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:19092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    networks:
      - broker-kafka
    depends_on:
      - kafka
    ports:
      - "19000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:19092

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    networks:
      - broker-kafka
    depends_on:
      - kafka
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    ports:
      - "8081:8081"
    command: ["start-dev", "--import-realm", "--http-port=8081"]

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    networks:
      - broker-kafka
    ports:
      - "8761:8761"

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    networks:
      - broker-kafka
    depends_on:
      - server
      - keycloak
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      DEFAULT_ZONE: http://server:8761/eureka
      DEFAULT_KEYCLOAK: http://keycloak:8081/realms/commerce

  products:
    build:
      context: ./products
      dockerfile: Dockerfile
    networks:
      - broker-kafka
    depends_on:
      - server
      - gateway
    restart: unless-stopped
    environment:
      DEFAULT_ZONE: http://server:8761/eureka
      SPRING_PROFILES_ACTIVE: docker

  clients:
    build:
      context: ./clients
      dockerfile: Dockerfile
    networks:
      - broker-kafka
    depends_on:
      - server
      - gateway
    restart: unless-stopped
    environment:
      DEFAULT_ZONE: http://server:8761/eureka
      SPRING_PROFILES_ACTIVE: docker

  delivery:
    build:
      context: ./delivery
      dockerfile: Dockerfile
    networks:
      - broker-kafka
    depends_on:
      - kafka
      - server
      - gateway
      - products
    restart: unless-stopped
    environment:
      KAFKA_HOST: kafka:19092
      DEFAULT_ZONE: http://server:8761/eureka
      PRODUCTS_API_URL: http://gateway:8080/api/v1/products
      SPRING_PROFILES_ACTIVE: docker

  orders:
    build:
      context: ./orders
      dockerfile: Dockerfile
    networks:
      - broker-kafka
    depends_on:
      - kafka
      - server
      - gateway
      - products
      - clients
      - delivery
    restart: unless-stopped
    environment:
      KAFKA_HOST: kafka:19092
      DEFAULT_ZONE: http://server:8761/eureka
      CLIENTS_API_URL: http://gateway:8080/api/v1/clients
      PRODUCTS_API_URL: http://gateway:8080/api/v1/products
      SPRING_PROFILES_ACTIVE: docker

networks:
  broker-kafka:
    driver: bridge